OT2.LocalData = {
    userData: null,
    name: location.hostname,
    isLocalStorage: "undefined" != typeof localStorage,
    init: function () {
        if (!this.userData) try {
            this.userData = document.createElement("INPUT"), this.userData.type = "hidden", this.userData.style.display = "none", this.userData.addBehavior("#default#userData"), document.body.appendChild(this.userData);
            var t = new Date;
            t.setDate(t.getDate() + 365), this.userData.expires = t.toUTCString()
        } catch (t) {
            return !1
        }
        return !0
    },
    setLocal: function (t, a) {
        this.isLocalStorage ? localStorage.setItem(t, a) : this.init() && (this.userData.load(this.name), this.userData.setAttribute(t, a), this.userData.save(this.name))
    },
    set: function (t, a, e) {
        void 0 !== USER.uid && (void 0 === e ? $.post("/ajax/set-basket", {key: t, value: a}).done(function () {
        }) : $.ajax({type: "post", url: "/ajax/set-basket", data: {key: t, value: a}, async: e}))
    },
    getLocal: function (t) {
        return this.isLocalStorage ? localStorage.getItem(t) : this.init() ? (this.userData.load(this.name), this.userData.getAttribute(t)) : null
    },
    get: function (t) {
        var a = null;
        return void 0 !== USER.uid && $.ajax({
            type: "get",
            url: "/ajax/get-basket",
            data: {key: t},
            async: !1,
            success: function (t) {
                200 == t.res && (a = t.data)
            }
        }), a
    },
    removeLocal: function (t) {
        this.isLocalStorage ? localStorage.removeItem(t) : this.init() && (this.userData.load(this.name), this.userData.removeAttribute(t), this.userData.save(this.name))
    },
    remove: function (t, a) {
        void 0 !== USER.uid && (void 0 === a ? $.get("/ajax/remove-basket", {key: t}).done(function () {
        }) : $.ajax({type: "get", url: "/ajax/remove-basket", data: {key: t}, async: !1}))
    }
};