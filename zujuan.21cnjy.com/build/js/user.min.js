var _util = OT2.Util, Field = OT2.Field;
OT2.UserForm = function () {
    function t(t) {
        dialog({
            title: "提示",
            content: _.template(OT2.Util.Template().get("send-email"), {content: t}),
            okValue: "确定",
            cancelValue: "关闭",
            ok: function () {
            },
            cancel: function () {
            }
        }).showModal()
    }

    var e = function () {
        void 0 === document.createElement("input").placeholder && $(".placeholder").each(function () {
            var t = $(this);
            t.show(), t.next("input").on("keyup focus", function () {
                var e = $.trim(this.value);
                t[e ? "hide" : "show"]()
            }).on("blur", function () {
                $.trim(this.value) || t.show()
            }).trigger("keyup")
        })
    }, i = function () {
        this.errors = [], this.checkFields = []
    };
    i.prototype = {
        checkForm: function () {
            this.errors = [];
            for (var t, e = 0; t = this.checkFields[e++];) {
                var i = t.checkIt();
                i && this.errors.push(i)
            }
            return !this.errors.length
        }, addField: function (t) {
            this.checkFields.push(t)
        }, initCheckField: function () {
        }, bindOnFocus: function () {
            for (var t, e = 0; t = this.checkFields[e++];) t.addRule("focus", function () {
                this.removeError()
            }, !1)
        }, bindEvent: function () {
        }, init: function () {
            return this.initCheckField(), this.bindOnFocus(), this.bindEvent(), this
        }
    };
    var n = function () {
        if (!(this instanceof n)) return new n;
        this.$form = $("#login.html-form"), this.returnurl = null, i.call(this)
    };
    _.extend(n.prototype, i.prototype), _.extend(n.prototype, {
        initCheckField: function () {
            var t = new Field("#account");
            t.addRule("blur", function (t) {
                if (t.length <= 0) return "账号不能为空！"
            }), this.addField(t), (t = new Field("#password")).addRule("blur", function (t) {
                if (t.length <= 0) return "密码不能为空！"
            }), this.addField(t)
        }, clearError: function () {
            for (var t, e = 0; t = this.checkFields[e++];) t.removeError()
        }, bindEvent: function () {
            var t = this;
            this.ajaxLoginStatus = !1, this.$form.on("submit", function () {
                return !t.ajaxLoginStatus && (t.ajaxLoginStatus = !0, t.checkForm() && (t.$form.find("button[type=submit]").html("登录中..."), t.ajaxLogin().always(function () {
                    t.ajaxLoginStatus = !1, t.$form.find("button[type=submit]").html("登录")
                })), !1)
            })
        }, ajaxLogin: function () {
            var t = this, e = this.$form.serializeArray();
            return $.post("/login.html", e, function (e) {
                if (0 == e.errCode) {
                    if ("function" == typeof t.subscribe_login_success) return t.subscribe_login_success(t), !1;
                    if (t.returnurl) return window.location.href = t.returnurl, !1;
                    window.location.href = window.location.href
                } else t.checkFields[1].showError(e.message)
            }, "json")
        }
    });
    var r = function (t) {
        _Field = new Field("#password");
        var e = _Field;
        _Field.addRule("blur", function (t) {
            if (t.length <= 0) return "请输入密码！";
            if (t.length < 6) return "请输入最少6位的登录密码！";
            var n = i.getVal();
            if (n && n != t) return "确认密码输入不一致！";
            n && n == t && (i.removeError(), e.removeError())
        }), t.addField(_Field), _Field = new Field("#password_confirm");
        var i = _Field;
        _Field.addRule("blur", function (t) {
            if (t.length <= 0) return "请输入确认密码！";
            if (t.length < 6) return "请输入最少6位的登录密码！";
            var n = e.getVal();
            if (n && n != t) return "确认密码输入不一致！";
            n && n == t && (i.removeError(), e.removeError())
        }), t.addField(_Field)
    }, o = function (t) {
        var e = new Field("#mobile");
        e.addRule("blur", function (t) {
            return t.length <= 0 ? "请输入手机号码！" : /^(13[0-9]|15[0-9]|18[0-9]|14[57])\d{8}$/.test(t) ? void 0 : "手机格式不正确！"
        }), e.addRule("validate", function (t) {
            if (this.$el.data("res") == t) return "该手机号码已经被注册过！"
        }), t.addField(e), (e = new Field("#captcha_code")).addRule("blur", function (t) {
            return t.length <= 0 ? "请输入验证码！" : /^\d{4}$/.test(t) ? void 0 : "请输入4位验证码！"
        }), t.addField(e)
    }, l = function () {
        if (!(this instanceof l)) return new l;
        this.$form = $("#J_RegisterFormByMobile"), i.call(this)
    };
    _.extend(l.prototype, i.prototype), _.extend(l.prototype, {
        initCheckField: function () {
            var t = new Field("#mobile");
            this.mobileField = t, t.addRule("blur validate", function (t) {
                return t.length <= 0 ? "请输入手机号码！" : /^(13[0-9]|15[0-9]|18[0-9]|14[57])\d{8}$/.test(t) ? this.$el.data("res") == t ? "该手机号码已经被注册过！" : void 0 : "手机格式不正确！"
            }), this.addField(t), (t = new Field("#captcha_code")).addRule("blur", function (t) {
                return t.length <= 0 ? "请输入验证码！" : /^\d{4}$/.test(t) ? void 0 : "请输入4位验证码！"
            }), this.addField(t), r(this)
        }, bindEvent: function () {
            var t = this;
            $("#J_getCode").on("click", function (e) {
                if (t.mobileField.checkIt()) return !1;
                OT2.Util.getCode(this)
            }), this.$form.on("submit", function () {
                return !!t.checkForm()
            })
        }
    });
    var s = function (t) {
        var e = new Field("#account");
        e.addRule("blur", function (t) {
            return t.length <= 0 ? "请输入邮箱！" : /^\w+((-\w+)|(\.\w+))*\@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z0-9]+$/.test(t) ? void 0 : "邮箱格式不对！"
        }), t.addField(e)
    }, u = function () {
        if (!(this instanceof u)) return new u;
        this.$form = $("#J_RegisterFormByEmail"), i.call(this)
    };
    _.extend(u.prototype, i.prototype), _.extend(u.prototype, {
        initCheckField: function () {
            var e = new Field("#email");
            e.addRule("blur", function (t) {
                return t.length <= 0 ? "请输入邮箱！" : /^\w+((-\w+)|(\.\w+))*\@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z0-9]+$/.test(t) ? void 0 : "邮箱格式不对！"
            }), this.addField(e), r(this);
            var i = this;
            $("#submit_mail").bind("click", function () {
                if (!i.checkForm()) return !1;
                var e = $("#email").val(), n = $("#password").val(), r = "";
                $.post("/site/send-email", {email: e, password: n}, "json").done(function (i) {
                    t(r = 0 == i.errCode ? '<h1>验证邮箱发送成功</h1><p>请进入邮箱 <a href="' + i.message + '" target="_blank">' + e + "</a> 点击链接激活邮箱</p>" : i.message)
                }).fail()
            })
        }
    });
    var d = function () {
        if (!(this instanceof d)) return new d;
        this.$form = $("#J_RegisterFormByMobile"), i.call(this)
    };
    _.extend(d.prototype, i.prototype), _.extend(d.prototype, {
        initCheckField: function () {
            o(this)
        }, bindEvent: function () {
            var t = this;
            this.$form.on("submit", function () {
                return !!t.checkForm() || (alert(t.errors), !1)
            })
        }
    });
    var a = function () {
        if (!(this instanceof a)) return new a;
        this.$form = $("#J_RegisterFormByMobile"), i.call(this)
    };
    _.extend(a.prototype, i.prototype), _.extend(a.prototype, {
        initCheckField: function () {
            r(this)
        }, bindEvent: function () {
            var t = this;
            this.$form.on("submit", function () {
                return !!t.checkForm()
            })
        }
    });
    var c = function () {
        if (!(this instanceof c)) return new c;
        this.$form = $("#J_RegisterFormByEmail"), i.call(this)
    };
    _.extend(c.prototype, i.prototype), _.extend(c.prototype, {
        initCheckField: function () {
            s(this)
        }, bindEvent: function () {
            var t = this;
            this.$form.on("submit", function () {
                return !!t.checkForm()
            })
        }
    });
    var h = function () {
        if (!(this instanceof h)) return new h;
        this.$form = $("#J_RegisterFormByEmail"), i.call(this)
    };
    return _.extend(h.prototype, i.prototype), _.extend(h.prototype, {
        initCheckField: function () {
            r(this)
        }, bindEvent: function () {
            var t = this;
            this.$form.on("submit", function () {
                return !!t.checkForm()
            })
        }
    }), {
        initPlaceholder: e,
        Login: n,
        MobileRegister: l,
        EmailRegister: u,
        GetPasswordByMobileStep1: d,
        GetPasswordByMobileStep2: a,
        GetPasswordByEmailStep1: c,
        GetPasswordByEmailStep3: h
    }
}();