/** 
 * 注册模块
 *
 */

(function (win) {
    
    var template = function (id) {
        return _.template($.trim($(id).html()));
    };

    // 容器视图
    var _laytouView = null; // 内部引用变量
    var LayoutView = Backbone.View.extend({
        views: {},
        initialize: function () { 
            var self = this;
            _laytouView = self;
            _.each([BarView, Step1View, EmailView, MobileView, Step3View], function (_View) {
                new _View({parentView: self});
            });
            var command = this.model.get('completed') ? 'render-step3' : 'render-step1';
            this.trigger(command);
        },
        renderBody: function (view) {
            if (this.currentView) this.currentView.$el.hide();
            this.currentView = view;
            view.$el.show();
            this.$el.find('.main-view').append(view.$el);
        },
        events: {
            'click a[data-type]': function (evt) {
                var type = $(evt.target).data('type');
                this.model.set({ type: type });
                this.trigger('render-step2');
            },
            'click a.return-step1': function (evt) {
                this.trigger('render-step1');
            }
        }
    });

    // 进度条视图
    var BarView = Backbone.View.extend({
        el: 'ul.flow-tag',
        initialize: function (options) {
            _.extend(this, options);
            this.listenTo(this.parentView.model, 'change:step', this.render);
        },
        render: function () {
            this.$el.html(template('#tpl-stepbar')(this.parentView.model.toJSON()));
            return this;
        }
    });

    // step1 
    var Step1View = Backbone.View.extend({
        initialize: function (options) {
            _.extend(this, options);
            this.loaded = false;
            this.listenTo(this.parentView, 'render-step1', function () {
                this.parentView.model.set('step', 1);
                this.render();
            })
        },
        render: function () {
            if (!this.loaded) this.$el.html(template('#step1')());
            this.parentView.renderBody(this);
            this.loaded = true;
            return this;
        },
        events: {
            'click a[data-identity]': function (evt) {
                var id = $(evt.target).data('identity');
                var name = $(evt.target).text().substr(0,2);
                this.parentView.model.set({identity: id, name: name});
                this.parentView.trigger('render-step2');
            }
        }
    })

    // 邮箱注册表单
    var EmailView = Backbone.View.extend({
        initialize: function (options) { 
            _.extend(this, options);
            this.loaded = false;
            this.listenTo(this.parentView, 'render-step2', function () {
                if (this.parentView.model.get('type') == 'email') {
                    this.parentView.model.set('step', 2);
                    this.render();
                }
                
            });
        },
        render: function () {
            var id = this.parentView.model.get('identity');
            var name = this.parentView.model.get('name');
            if (!this.loaded) {
                this.$el = $(template('#step2-email')({ identity: id, name: name }));
                this.loaded = true;
                new EmailForm(this.$el).init();
            }
            this.$el.find('input[name=identity]').val(id);
            this.$el.find('.ttips span').text(name);
            this.parentView.renderBody(this);
        }
    });

    // 手机注册表单
    var MobileView = Backbone.View.extend({
        initialize: function (options) {
            _.extend(this, options);
            this.loaded = false;
            this.listenTo(this.parentView, 'render-step2', function () {
                if (this.parentView.model.get('type') == 'mobile') {
                    this.parentView.model.set('step', 2);
                    this.render();
                }
            });
        },
        render: function () {
            var id = this.parentView.model.get('identity');
            var name = this.parentView.model.get('name');
            if (!this.loaded) {
                this.$el = $(template('#step2-mobile')({ identity: id, name: name }));
                this.loaded = true;
                new MobileForm(this.$el).init();
            }
            this.$el.find('input[name=identity]').val(id);
            this.$el.find('.ttips span').text(name);
            this.parentView.renderBody(this);
        },
        
    });

    // step3
    var Step3View = Backbone.View.extend({
        initialize: function (options) {
            _.extend(this, options);
            this.loaded = false;
            this.listenTo(this.parentView, 'render-step3', function () {
                this.parentView.model.set('step', 3);
                this.render();
            });
        },
        render: function (data) {
            if (data) this.parentView.model.set(data);
            if (!this.loaded) this.$el.html(template('#step3')())
            this.parentView.renderBody(this);
            this.loaded = true;
            this.goBack();
        },
        goBack: function () { 
            var url = this.$el.find('#j-return-url').attr('href');
            var $e = this.$el.find('#j-return-url .seconds');
            var n = Number($e.text());
            n = n ? n : 0;
            var t = null;
            if (url) {
                t = setInterval(function () { 
                    n--;
                    if (n <= 0) {
                        clearInterval(t);
                        //window.location = url;
                        return false;
                    }
                    $e.html(n);
                }, 1000);
            }
        }

    });



    // 注册通用表单
    var RegisterForm = function ($el) {
        CommonForm.apply(this, arguments);
    };
    $.extend(RegisterForm.prototype, CommonForm.prototype, {
        events: function () {

        /**
         * 验证码错误处理
         * 第一次错误需要展示
         * 第二次修改的时候在没有进行验证之前需要把错误提示隐藏，避免造成误解
         * date:2017-12-25
         */
        this.$el.on('focus','#verifyCode',function () {
            //获取该节点的下一个节点
            var next= $(this).next();
            if(next.hasClass('error-msg')){
                next.hide();
            }else{
                next.show();
            }
        });

        /**
         * 发送短信图形验证码
         * @author leishao 2017-5-31
         */
        var refreshCaptcha = function () {
             $.get('/site/captcha', { 'refresh': 1 }, function (data) {
                 $('#mobile-captcha').attr('src',data.url);
             });
        };
        refreshCaptcha();
        this.$el.on('click', '#mobile-captcha',refreshCaptcha );

            var self = this;
            this.$el.on('submit', 'form', function (evt) {
                evt.preventDefault();
                if (!self.checkForm()) {
                    return false;
                }
                var checked_protocol = self.$el.find('input[type=checkbox]').prop('checked');
                if (!checked_protocol) {
                    layer.alert('<div class="modal-protocol">需同意<a href="/html/protocol.html" target="_blank">《二一教育注册协议》</a>，才能注册！</div>');
                    return false;
                }

                $.post(this.action, $(this).serializeArray(), 'json')
                    .done(function (res) {
                        if (res.errcode) { 
                            layer.alert(res.message);
                        }
                        else {
                            _laytouView.trigger('render-step3', {step: 3, completed: 1});
                        }
                    })
                    .fail(function () { layer.alert('异常，提交失败！');});
            });
            
            // 注册协议 
            this.regProtocol();

        },
        // 检测是否阅读注册协议
        regProtocol: function () { 
            this.$el.on('click', '.custom-checkbox', function () { 
                var checked = !$(this).find('input[type=checkbox]').prop('checked');
                $(this)[checked ? 'addClass' : 'removeClass']('checked');
                $(this).find('input[type=checkbox]').prop('checked', checked);
            }); 
            
        } 
    });



    // 手机注册
    var MobileForm = function () { 
        RegisterForm.apply(this, arguments);
    };
    $.extend(MobileForm.prototype, RegisterForm.prototype, {
        initCheckField: function () { 
            var self = this;
            this.$el.find('input').each(function () {
                if (this.name == 'mobile') { 
                    var _Field = self.attachMobileCheck(this);
                    _Field.onPromiseCheck('blur', function (v) { 
                        return Validate.checkAccount(v, 'mobile');
                    });
                }
                
                if (this.name == 'scode') {
                    self.attachScodeCheck(this);
                }
                
                if (this.name == 'password') {
                    self.attachPasswordCheck(this, 'password2');
                }
                
                if (this.name == 'password2') {
                    self.attachPasswordCheck(this, 'password');
                }
            });

        },
        events: function () {
            var self = this;
            RegisterForm.prototype.events.call(this);
            this.getCode('mobile');
        
        }
    });

    // 邮箱注册
    var EmailForm = function () {
        RegisterForm.apply(this, arguments);
    };

    $.extend(EmailForm.prototype, RegisterForm.prototype, {
        initCheckField: function () {
            var self = this;
            this.$el.find('input').each(function () {
                if (this.name == 'email') {
                    var _Field = self.attachEmailCheck(this);
                    _Field.onPromiseCheck('blur', function (v) { 
                        return Validate.checkAccount(v, 'email');
                    });
                }
                if (this.name == 'scode') {
                    self.attachScodeCheck(this);
                }
                if (this.name == 'password') {
                    self.attachPasswordCheck(this, 'password2');
                }
                
                if (this.name == 'password2') {
                    self.attachPasswordCheck(this, 'password');
                }

            });
        },
        events: function () {
            var self = this;
            RegisterForm.prototype.events.call(this);
            this.getCode('email');
        }
        
    });

    win.LayoutView = LayoutView;  

})(window);
